
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String        @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  invites       Invite[]      @relation("UserInvites")
  jellyfinUser  JellyfinUser?

  username        String?
  displayUsername String?

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
  @@unique([username])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Invite {
  id         String    @id @default(cuid())
  code       String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  usageCount Int       @default(0)
  maxUses    Int?

  createdBy   User   @relation("UserInvites", fields: [createdById], references: [id])
  createdById String

  profileId String
  profile   Profile @relation("ProfileInvites", fields: [profileId], references: [id], onDelete: Cascade)

  @@map("invites")
}

model Profile {
  id             String       @id @default(cuid())
  name           String?
  isDefault      Boolean      @default(false)
  invites        Invite[]     @relation("ProfileInvites")
  jellyfinUser   JellyfinUser @relation(fields: [jellyfinUserId], references: [id], onDelete: Cascade)
  jellyfinUserId String

  @@map("profiles")
}

model JellyfinUser {
  id             String    @id @default(cuid())
  jellyfinUserId String    @unique
  username       String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
  profiles       Profile[]

  @@map("jellyfin_users")
}
