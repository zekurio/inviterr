// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id             String    @id @default(cuid())
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    createdInvites Invite[]  @relation("CreatedBy")

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Invite {
    id         String    @id @default(cuid())
    code       String    @unique
    createdAt  DateTime  @default(now())
    expiresAt  DateTime?
    usageCount Int       @default(0)
    maxUses    Int?

    createdBy   User   @relation("CreatedBy", fields: [createdById], references: [id])
    createdById String

    profileId String
    profile   Profile @relation(fields: [profileId], references: [id])

    @@map("invites")
}

model Profile {
    id                     String   @id @default(cuid())
    name                   String?
    jellyfinTemplateUserId String?
    isDefault              Boolean  @default(false)
    Invite                 Invite[]

    @@map("profiles")
}
